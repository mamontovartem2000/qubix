// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatMessages
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public enum Payload : byte
{
  NONE = 0,
  JoinResult = 1,
  Start = 2,
  PlayerList = 3,
  TimeRemaining = 4,
  Shutdown = 5,
  RoomList = 6,
  JoinRequest = 7,
  ChangeRoom = 8,
  LeaveRoom = 9,
  CloseRoom = 10,
  SetCharacter = 11,
  JoinedTheGame = 12,
  ReplayFrom = 13,
  TimeFromStart = 14,
  StatsReceive = 15,
  GameOver = 16,
  TeamGameOver = 17,
  SaveHash = 18,
  InvalidHash = 19,
};

public struct JoinResult : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static JoinResult GetRootAsJoinResult(ByteBuffer _bb) { return GetRootAsJoinResult(_bb, new JoinResult()); }
  public static JoinResult GetRootAsJoinResult(ByteBuffer _bb, JoinResult obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public JoinResult __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool Value { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string Reason { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetReasonBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetReasonBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetReasonArray() { return __p.__vector_as_array<byte>(6); }
  public byte Slot { get { int o = __p.__offset(8); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public string Team { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTeamBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetTeamBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetTeamArray() { return __p.__vector_as_array<byte>(10); }

  public static Offset<FlatMessages.JoinResult> CreateJoinResult(FlatBufferBuilder builder,
      bool value = false,
      StringOffset reasonOffset = default(StringOffset),
      byte slot = 0,
      StringOffset teamOffset = default(StringOffset)) {
    builder.StartTable(4);
    JoinResult.AddTeam(builder, teamOffset);
    JoinResult.AddReason(builder, reasonOffset);
    JoinResult.AddSlot(builder, slot);
    JoinResult.AddValue(builder, value);
    return JoinResult.EndJoinResult(builder);
  }

  public static void StartJoinResult(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddValue(FlatBufferBuilder builder, bool value) { builder.AddBool(0, value, false); }
  public static void AddReason(FlatBufferBuilder builder, StringOffset reasonOffset) { builder.AddOffset(1, reasonOffset.Value, 0); }
  public static void AddSlot(FlatBufferBuilder builder, byte slot) { builder.AddByte(2, slot, 0); }
  public static void AddTeam(FlatBufferBuilder builder, StringOffset teamOffset) { builder.AddOffset(3, teamOffset.Value, 0); }
  public static Offset<FlatMessages.JoinResult> EndJoinResult(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatMessages.JoinResult>(o);
  }
};

public struct Start : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Start GetRootAsStart(ByteBuffer _bb) { return GetRootAsStart(_bb, new Start()); }
  public static Start GetRootAsStart(ByteBuffer _bb, Start obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Start __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool Value { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public uint Seed { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<FlatMessages.Start> CreateStart(FlatBufferBuilder builder,
      bool value = false,
      uint seed = 0) {
    builder.StartTable(2);
    Start.AddSeed(builder, seed);
    Start.AddValue(builder, value);
    return Start.EndStart(builder);
  }

  public static void StartStart(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddValue(FlatBufferBuilder builder, bool value) { builder.AddBool(0, value, false); }
  public static void AddSeed(FlatBufferBuilder builder, uint seed) { builder.AddUint(1, seed, 0); }
  public static Offset<FlatMessages.Start> EndStart(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatMessages.Start>(o);
  }
};

public struct Shutdown : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Shutdown GetRootAsShutdown(ByteBuffer _bb) { return GetRootAsShutdown(_bb, new Shutdown()); }
  public static Shutdown GetRootAsShutdown(ByteBuffer _bb, Shutdown obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Shutdown __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool Value { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<FlatMessages.Shutdown> CreateShutdown(FlatBufferBuilder builder,
      bool value = false) {
    builder.StartTable(1);
    Shutdown.AddValue(builder, value);
    return Shutdown.EndShutdown(builder);
  }

  public static void StartShutdown(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddValue(FlatBufferBuilder builder, bool value) { builder.AddBool(0, value, false); }
  public static Offset<FlatMessages.Shutdown> EndShutdown(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatMessages.Shutdown>(o);
  }
};

public struct SetCharacter : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static SetCharacter GetRootAsSetCharacter(ByteBuffer _bb) { return GetRootAsSetCharacter(_bb, new SetCharacter()); }
  public static SetCharacter GetRootAsSetCharacter(ByteBuffer _bb, SetCharacter obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SetCharacter __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string PlayerId { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPlayerIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetPlayerIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetPlayerIdArray() { return __p.__vector_as_array<byte>(4); }
  public string Character { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCharacterBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetCharacterBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetCharacterArray() { return __p.__vector_as_array<byte>(6); }

  public static Offset<FlatMessages.SetCharacter> CreateSetCharacter(FlatBufferBuilder builder,
      StringOffset player_idOffset = default(StringOffset),
      StringOffset characterOffset = default(StringOffset)) {
    builder.StartTable(2);
    SetCharacter.AddCharacter(builder, characterOffset);
    SetCharacter.AddPlayerId(builder, player_idOffset);
    return SetCharacter.EndSetCharacter(builder);
  }

  public static void StartSetCharacter(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddPlayerId(FlatBufferBuilder builder, StringOffset playerIdOffset) { builder.AddOffset(0, playerIdOffset.Value, 0); }
  public static void AddCharacter(FlatBufferBuilder builder, StringOffset characterOffset) { builder.AddOffset(1, characterOffset.Value, 0); }
  public static Offset<FlatMessages.SetCharacter> EndSetCharacter(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatMessages.SetCharacter>(o);
  }
};

public struct JoinRequest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static JoinRequest GetRootAsJoinRequest(ByteBuffer _bb) { return GetRootAsJoinRequest(_bb, new JoinRequest()); }
  public static JoinRequest GetRootAsJoinRequest(ByteBuffer _bb, JoinRequest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public JoinRequest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public sbyte GameType { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetSbyte(o + __p.bb_pos) : (sbyte)0; } }
  public string Json { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetJsonBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetJsonBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetJsonArray() { return __p.__vector_as_array<byte>(6); }

  public static Offset<FlatMessages.JoinRequest> CreateJoinRequest(FlatBufferBuilder builder,
      sbyte game_type = 0,
      StringOffset jsonOffset = default(StringOffset)) {
    builder.StartTable(2);
    JoinRequest.AddJson(builder, jsonOffset);
    JoinRequest.AddGameType(builder, game_type);
    return JoinRequest.EndJoinRequest(builder);
  }

  public static void StartJoinRequest(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddGameType(FlatBufferBuilder builder, sbyte gameType) { builder.AddSbyte(0, gameType, 0); }
  public static void AddJson(FlatBufferBuilder builder, StringOffset jsonOffset) { builder.AddOffset(1, jsonOffset.Value, 0); }
  public static Offset<FlatMessages.JoinRequest> EndJoinRequest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatMessages.JoinRequest>(o);
  }
};

public struct ChangeRoom : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static ChangeRoom GetRootAsChangeRoom(ByteBuffer _bb) { return GetRootAsChangeRoom(_bb, new ChangeRoom()); }
  public static ChangeRoom GetRootAsChangeRoom(ByteBuffer _bb, ChangeRoom obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ChangeRoom __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string RoomId { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRoomIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetRoomIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetRoomIdArray() { return __p.__vector_as_array<byte>(4); }

  public static Offset<FlatMessages.ChangeRoom> CreateChangeRoom(FlatBufferBuilder builder,
      StringOffset room_idOffset = default(StringOffset)) {
    builder.StartTable(1);
    ChangeRoom.AddRoomId(builder, room_idOffset);
    return ChangeRoom.EndChangeRoom(builder);
  }

  public static void StartChangeRoom(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRoomId(FlatBufferBuilder builder, StringOffset roomIdOffset) { builder.AddOffset(0, roomIdOffset.Value, 0); }
  public static Offset<FlatMessages.ChangeRoom> EndChangeRoom(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatMessages.ChangeRoom>(o);
  }
};

public struct Player : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Player GetRootAsPlayer(ByteBuffer _bb) { return GetRootAsPlayer(_bb, new Player()); }
  public static Player GetRootAsPlayer(ByteBuffer _bb, Player obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Player __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  public byte Slot { get { int o = __p.__offset(6); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public string Nickname { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNicknameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetNicknameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetNicknameArray() { return __p.__vector_as_array<byte>(8); }
  public string Character { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCharacterBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetCharacterBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetCharacterArray() { return __p.__vector_as_array<byte>(10); }
  public string Icon { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetIconBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetIconArray() { return __p.__vector_as_array<byte>(12); }

  public static Offset<FlatMessages.Player> CreatePlayer(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      byte slot = 0,
      StringOffset nicknameOffset = default(StringOffset),
      StringOffset characterOffset = default(StringOffset),
      StringOffset iconOffset = default(StringOffset)) {
    builder.StartTable(5);
    Player.AddIcon(builder, iconOffset);
    Player.AddCharacter(builder, characterOffset);
    Player.AddNickname(builder, nicknameOffset);
    Player.AddId(builder, idOffset);
    Player.AddSlot(builder, slot);
    return Player.EndPlayer(builder);
  }

  public static void StartPlayer(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddSlot(FlatBufferBuilder builder, byte slot) { builder.AddByte(1, slot, 0); }
  public static void AddNickname(FlatBufferBuilder builder, StringOffset nicknameOffset) { builder.AddOffset(2, nicknameOffset.Value, 0); }
  public static void AddCharacter(FlatBufferBuilder builder, StringOffset characterOffset) { builder.AddOffset(3, characterOffset.Value, 0); }
  public static void AddIcon(FlatBufferBuilder builder, StringOffset iconOffset) { builder.AddOffset(4, iconOffset.Value, 0); }
  public static Offset<FlatMessages.Player> EndPlayer(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatMessages.Player>(o);
  }
};

public struct Room : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Room GetRootAsRoom(ByteBuffer _bb) { return GetRootAsRoom(_bb, new Room()); }
  public static Room GetRootAsRoom(ByteBuffer _bb, Room obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Room __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  public uint PlayersCount { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint MaxPlayersCount { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<FlatMessages.Room> CreateRoom(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      uint players_count = 0,
      uint max_players_count = 0) {
    builder.StartTable(3);
    Room.AddMaxPlayersCount(builder, max_players_count);
    Room.AddPlayersCount(builder, players_count);
    Room.AddId(builder, idOffset);
    return Room.EndRoom(builder);
  }

  public static void StartRoom(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddPlayersCount(FlatBufferBuilder builder, uint playersCount) { builder.AddUint(1, playersCount, 0); }
  public static void AddMaxPlayersCount(FlatBufferBuilder builder, uint maxPlayersCount) { builder.AddUint(2, maxPlayersCount, 0); }
  public static Offset<FlatMessages.Room> EndRoom(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatMessages.Room>(o);
  }
};

public struct RoomList : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static RoomList GetRootAsRoomList(ByteBuffer _bb) { return GetRootAsRoomList(_bb, new RoomList()); }
  public static RoomList GetRootAsRoomList(ByteBuffer _bb, RoomList obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RoomList __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public FlatMessages.Room? Rooms(int j) { int o = __p.__offset(4); return o != 0 ? (FlatMessages.Room?)(new FlatMessages.Room()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RoomsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<FlatMessages.RoomList> CreateRoomList(FlatBufferBuilder builder,
      VectorOffset roomsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    RoomList.AddRooms(builder, roomsOffset);
    return RoomList.EndRoomList(builder);
  }

  public static void StartRoomList(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRooms(FlatBufferBuilder builder, VectorOffset roomsOffset) { builder.AddOffset(0, roomsOffset.Value, 0); }
  public static VectorOffset CreateRoomsVector(FlatBufferBuilder builder, Offset<FlatMessages.Room>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRoomsVectorBlock(FlatBufferBuilder builder, Offset<FlatMessages.Room>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRoomsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<FlatMessages.RoomList> EndRoomList(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatMessages.RoomList>(o);
  }
};

public struct LeaveRoom : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static LeaveRoom GetRootAsLeaveRoom(ByteBuffer _bb) { return GetRootAsLeaveRoom(_bb, new LeaveRoom()); }
  public static LeaveRoom GetRootAsLeaveRoom(ByteBuffer _bb, LeaveRoom obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LeaveRoom __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool Value { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<FlatMessages.LeaveRoom> CreateLeaveRoom(FlatBufferBuilder builder,
      bool value = false) {
    builder.StartTable(1);
    LeaveRoom.AddValue(builder, value);
    return LeaveRoom.EndLeaveRoom(builder);
  }

  public static void StartLeaveRoom(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddValue(FlatBufferBuilder builder, bool value) { builder.AddBool(0, value, false); }
  public static Offset<FlatMessages.LeaveRoom> EndLeaveRoom(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatMessages.LeaveRoom>(o);
  }
};

public struct JoinedTheGame : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static JoinedTheGame GetRootAsJoinedTheGame(ByteBuffer _bb) { return GetRootAsJoinedTheGame(_bb, new JoinedTheGame()); }
  public static JoinedTheGame GetRootAsJoinedTheGame(ByteBuffer _bb, JoinedTheGame obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public JoinedTheGame __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool Value { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<FlatMessages.JoinedTheGame> CreateJoinedTheGame(FlatBufferBuilder builder,
      bool value = false) {
    builder.StartTable(1);
    JoinedTheGame.AddValue(builder, value);
    return JoinedTheGame.EndJoinedTheGame(builder);
  }

  public static void StartJoinedTheGame(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddValue(FlatBufferBuilder builder, bool value) { builder.AddBool(0, value, false); }
  public static Offset<FlatMessages.JoinedTheGame> EndJoinedTheGame(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatMessages.JoinedTheGame>(o);
  }
};

public struct PlayerList : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static PlayerList GetRootAsPlayerList(ByteBuffer _bb) { return GetRootAsPlayerList(_bb, new PlayerList()); }
  public static PlayerList GetRootAsPlayerList(ByteBuffer _bb, PlayerList obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PlayerList __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public FlatMessages.Player? Players(int j) { int o = __p.__offset(4); return o != 0 ? (FlatMessages.Player?)(new FlatMessages.Player()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int PlayersLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<FlatMessages.PlayerList> CreatePlayerList(FlatBufferBuilder builder,
      VectorOffset playersOffset = default(VectorOffset)) {
    builder.StartTable(1);
    PlayerList.AddPlayers(builder, playersOffset);
    return PlayerList.EndPlayerList(builder);
  }

  public static void StartPlayerList(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddPlayers(FlatBufferBuilder builder, VectorOffset playersOffset) { builder.AddOffset(0, playersOffset.Value, 0); }
  public static VectorOffset CreatePlayersVector(FlatBufferBuilder builder, Offset<FlatMessages.Player>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePlayersVectorBlock(FlatBufferBuilder builder, Offset<FlatMessages.Player>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartPlayersVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<FlatMessages.PlayerList> EndPlayerList(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatMessages.PlayerList>(o);
  }
};

public struct TimeRemaining : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static TimeRemaining GetRootAsTimeRemaining(ByteBuffer _bb) { return GetRootAsTimeRemaining(_bb, new TimeRemaining()); }
  public static TimeRemaining GetRootAsTimeRemaining(ByteBuffer _bb, TimeRemaining obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TimeRemaining __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Value { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public string State { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStateBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetStateBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetStateArray() { return __p.__vector_as_array<byte>(6); }

  public static Offset<FlatMessages.TimeRemaining> CreateTimeRemaining(FlatBufferBuilder builder,
      uint value = 0,
      StringOffset stateOffset = default(StringOffset)) {
    builder.StartTable(2);
    TimeRemaining.AddState(builder, stateOffset);
    TimeRemaining.AddValue(builder, value);
    return TimeRemaining.EndTimeRemaining(builder);
  }

  public static void StartTimeRemaining(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddValue(FlatBufferBuilder builder, uint value) { builder.AddUint(0, value, 0); }
  public static void AddState(FlatBufferBuilder builder, StringOffset stateOffset) { builder.AddOffset(1, stateOffset.Value, 0); }
  public static Offset<FlatMessages.TimeRemaining> EndTimeRemaining(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatMessages.TimeRemaining>(o);
  }
};

public struct ReplayFrom : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static ReplayFrom GetRootAsReplayFrom(ByteBuffer _bb) { return GetRootAsReplayFrom(_bb, new ReplayFrom()); }
  public static ReplayFrom GetRootAsReplayFrom(ByteBuffer _bb, ReplayFrom obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ReplayFrom __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint LastTick { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<FlatMessages.ReplayFrom> CreateReplayFrom(FlatBufferBuilder builder,
      uint last_tick = 0) {
    builder.StartTable(1);
    ReplayFrom.AddLastTick(builder, last_tick);
    return ReplayFrom.EndReplayFrom(builder);
  }

  public static void StartReplayFrom(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddLastTick(FlatBufferBuilder builder, uint lastTick) { builder.AddUint(0, lastTick, 0); }
  public static Offset<FlatMessages.ReplayFrom> EndReplayFrom(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatMessages.ReplayFrom>(o);
  }
};

public struct SaveHash : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static SaveHash GetRootAsSaveHash(ByteBuffer _bb) { return GetRootAsSaveHash(_bb, new SaveHash()); }
  public static SaveHash GetRootAsSaveHash(ByteBuffer _bb, SaveHash obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SaveHash __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Tick { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public int Hash { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<FlatMessages.SaveHash> CreateSaveHash(FlatBufferBuilder builder,
      uint tick = 0,
      int hash = 0) {
    builder.StartTable(2);
    SaveHash.AddHash(builder, hash);
    SaveHash.AddTick(builder, tick);
    return SaveHash.EndSaveHash(builder);
  }

  public static void StartSaveHash(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddTick(FlatBufferBuilder builder, uint tick) { builder.AddUint(0, tick, 0); }
  public static void AddHash(FlatBufferBuilder builder, int hash) { builder.AddInt(1, hash, 0); }
  public static Offset<FlatMessages.SaveHash> EndSaveHash(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatMessages.SaveHash>(o);
  }
};

public struct InvalidHash : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static InvalidHash GetRootAsInvalidHash(ByteBuffer _bb) { return GetRootAsInvalidHash(_bb, new InvalidHash()); }
  public static InvalidHash GetRootAsInvalidHash(ByteBuffer _bb, InvalidHash obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public InvalidHash __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Tick { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<FlatMessages.InvalidHash> CreateInvalidHash(FlatBufferBuilder builder,
      uint tick = 0) {
    builder.StartTable(1);
    InvalidHash.AddTick(builder, tick);
    return InvalidHash.EndInvalidHash(builder);
  }

  public static void StartInvalidHash(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddTick(FlatBufferBuilder builder, uint tick) { builder.AddUint(0, tick, 0); }
  public static Offset<FlatMessages.InvalidHash> EndInvalidHash(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatMessages.InvalidHash>(o);
  }
};

public struct TimeFromStart : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static TimeFromStart GetRootAsTimeFromStart(ByteBuffer _bb) { return GetRootAsTimeFromStart(_bb, new TimeFromStart()); }
  public static TimeFromStart GetRootAsTimeFromStart(ByteBuffer _bb, TimeFromStart obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TimeFromStart __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Time { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<FlatMessages.TimeFromStart> CreateTimeFromStart(FlatBufferBuilder builder,
      uint time = 0) {
    builder.StartTable(1);
    TimeFromStart.AddTime(builder, time);
    return TimeFromStart.EndTimeFromStart(builder);
  }

  public static void StartTimeFromStart(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddTime(FlatBufferBuilder builder, uint time) { builder.AddUint(0, time, 0); }
  public static Offset<FlatMessages.TimeFromStart> EndTimeFromStart(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatMessages.TimeFromStart>(o);
  }
};

public struct Stats : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Stats GetRootAsStats(ByteBuffer _bb) { return GetRootAsStats(_bb, new Stats()); }
  public static Stats GetRootAsStats(ByteBuffer _bb, Stats obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Stats __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Kills { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint Deaths { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public string Id { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(8); }

  public static Offset<FlatMessages.Stats> CreateStats(FlatBufferBuilder builder,
      uint kills = 0,
      uint deaths = 0,
      StringOffset idOffset = default(StringOffset)) {
    builder.StartTable(3);
    Stats.AddId(builder, idOffset);
    Stats.AddDeaths(builder, deaths);
    Stats.AddKills(builder, kills);
    return Stats.EndStats(builder);
  }

  public static void StartStats(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddKills(FlatBufferBuilder builder, uint kills) { builder.AddUint(0, kills, 0); }
  public static void AddDeaths(FlatBufferBuilder builder, uint deaths) { builder.AddUint(1, deaths, 0); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(2, idOffset.Value, 0); }
  public static Offset<FlatMessages.Stats> EndStats(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatMessages.Stats>(o);
  }
};

public struct TeamStats : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static TeamStats GetRootAsTeamStats(ByteBuffer _bb) { return GetRootAsTeamStats(_bb, new TeamStats()); }
  public static TeamStats GetRootAsTeamStats(ByteBuffer _bb, TeamStats obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TeamStats __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Kills { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint Deaths { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public string Id { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(8); }
  public string Team { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTeamBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetTeamBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetTeamArray() { return __p.__vector_as_array<byte>(10); }

  public static Offset<FlatMessages.TeamStats> CreateTeamStats(FlatBufferBuilder builder,
      uint kills = 0,
      uint deaths = 0,
      StringOffset idOffset = default(StringOffset),
      StringOffset teamOffset = default(StringOffset)) {
    builder.StartTable(4);
    TeamStats.AddTeam(builder, teamOffset);
    TeamStats.AddId(builder, idOffset);
    TeamStats.AddDeaths(builder, deaths);
    TeamStats.AddKills(builder, kills);
    return TeamStats.EndTeamStats(builder);
  }

  public static void StartTeamStats(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddKills(FlatBufferBuilder builder, uint kills) { builder.AddUint(0, kills, 0); }
  public static void AddDeaths(FlatBufferBuilder builder, uint deaths) { builder.AddUint(1, deaths, 0); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(2, idOffset.Value, 0); }
  public static void AddTeam(FlatBufferBuilder builder, StringOffset teamOffset) { builder.AddOffset(3, teamOffset.Value, 0); }
  public static Offset<FlatMessages.TeamStats> EndTeamStats(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatMessages.TeamStats>(o);
  }
};

public struct GameOver : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static GameOver GetRootAsGameOver(ByteBuffer _bb) { return GetRootAsGameOver(_bb, new GameOver()); }
  public static GameOver GetRootAsGameOver(ByteBuffer _bb, GameOver obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public GameOver __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Winner { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetWinnerBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetWinnerBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetWinnerArray() { return __p.__vector_as_array<byte>(4); }
  public int Hash { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public FlatMessages.Stats? Stats(int j) { int o = __p.__offset(8); return o != 0 ? (FlatMessages.Stats?)(new FlatMessages.Stats()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int StatsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<FlatMessages.GameOver> CreateGameOver(FlatBufferBuilder builder,
      StringOffset winnerOffset = default(StringOffset),
      int hash = 0,
      VectorOffset statsOffset = default(VectorOffset)) {
    builder.StartTable(3);
    GameOver.AddStats(builder, statsOffset);
    GameOver.AddHash(builder, hash);
    GameOver.AddWinner(builder, winnerOffset);
    return GameOver.EndGameOver(builder);
  }

  public static void StartGameOver(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddWinner(FlatBufferBuilder builder, StringOffset winnerOffset) { builder.AddOffset(0, winnerOffset.Value, 0); }
  public static void AddHash(FlatBufferBuilder builder, int hash) { builder.AddInt(1, hash, 0); }
  public static void AddStats(FlatBufferBuilder builder, VectorOffset statsOffset) { builder.AddOffset(2, statsOffset.Value, 0); }
  public static VectorOffset CreateStatsVector(FlatBufferBuilder builder, Offset<FlatMessages.Stats>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateStatsVectorBlock(FlatBufferBuilder builder, Offset<FlatMessages.Stats>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartStatsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<FlatMessages.GameOver> EndGameOver(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatMessages.GameOver>(o);
  }
};

public struct TeamGameOver : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static TeamGameOver GetRootAsTeamGameOver(ByteBuffer _bb) { return GetRootAsTeamGameOver(_bb, new TeamGameOver()); }
  public static TeamGameOver GetRootAsTeamGameOver(ByteBuffer _bb, TeamGameOver obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TeamGameOver __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string WinTeam { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetWinTeamBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetWinTeamBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetWinTeamArray() { return __p.__vector_as_array<byte>(4); }
  public int Hash { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public FlatMessages.TeamStats? Stats(int j) { int o = __p.__offset(8); return o != 0 ? (FlatMessages.TeamStats?)(new FlatMessages.TeamStats()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int StatsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<FlatMessages.TeamGameOver> CreateTeamGameOver(FlatBufferBuilder builder,
      StringOffset win_teamOffset = default(StringOffset),
      int hash = 0,
      VectorOffset statsOffset = default(VectorOffset)) {
    builder.StartTable(3);
    TeamGameOver.AddStats(builder, statsOffset);
    TeamGameOver.AddHash(builder, hash);
    TeamGameOver.AddWinTeam(builder, win_teamOffset);
    return TeamGameOver.EndTeamGameOver(builder);
  }

  public static void StartTeamGameOver(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddWinTeam(FlatBufferBuilder builder, StringOffset winTeamOffset) { builder.AddOffset(0, winTeamOffset.Value, 0); }
  public static void AddHash(FlatBufferBuilder builder, int hash) { builder.AddInt(1, hash, 0); }
  public static void AddStats(FlatBufferBuilder builder, VectorOffset statsOffset) { builder.AddOffset(2, statsOffset.Value, 0); }
  public static VectorOffset CreateStatsVector(FlatBufferBuilder builder, Offset<FlatMessages.TeamStats>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateStatsVectorBlock(FlatBufferBuilder builder, Offset<FlatMessages.TeamStats>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartStatsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<FlatMessages.TeamGameOver> EndTeamGameOver(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatMessages.TeamGameOver>(o);
  }
};

public struct CloseRoom : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static CloseRoom GetRootAsCloseRoom(ByteBuffer _bb) { return GetRootAsCloseRoom(_bb, new CloseRoom()); }
  public static CloseRoom GetRootAsCloseRoom(ByteBuffer _bb, CloseRoom obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CloseRoom __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool Value { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<FlatMessages.CloseRoom> CreateCloseRoom(FlatBufferBuilder builder,
      bool value = false) {
    builder.StartTable(1);
    CloseRoom.AddValue(builder, value);
    return CloseRoom.EndCloseRoom(builder);
  }

  public static void StartCloseRoom(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddValue(FlatBufferBuilder builder, bool value) { builder.AddBool(0, value, false); }
  public static Offset<FlatMessages.CloseRoom> EndCloseRoom(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatMessages.CloseRoom>(o);
  }
};

public struct StatsReceive : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static StatsReceive GetRootAsStatsReceive(ByteBuffer _bb) { return GetRootAsStatsReceive(_bb, new StatsReceive()); }
  public static StatsReceive GetRootAsStatsReceive(ByteBuffer _bb, StatsReceive obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public StatsReceive __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool Ok { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<FlatMessages.StatsReceive> CreateStatsReceive(FlatBufferBuilder builder,
      bool ok = false) {
    builder.StartTable(1);
    StatsReceive.AddOk(builder, ok);
    return StatsReceive.EndStatsReceive(builder);
  }

  public static void StartStatsReceive(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddOk(FlatBufferBuilder builder, bool ok) { builder.AddBool(0, ok, false); }
  public static Offset<FlatMessages.StatsReceive> EndStatsReceive(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatMessages.StatsReceive>(o);
  }
};

public struct SystemMessage : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static SystemMessage GetRootAsSystemMessage(ByteBuffer _bb) { return GetRootAsSystemMessage(_bb, new SystemMessage()); }
  public static SystemMessage GetRootAsSystemMessage(ByteBuffer _bb, SystemMessage obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SystemMessage __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Timestamp { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public FlatMessages.Payload PayloadType { get { int o = __p.__offset(6); return o != 0 ? (FlatMessages.Payload)__p.bb.Get(o + __p.bb_pos) : FlatMessages.Payload.NONE; } }
  public TTable? Payload<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(8); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }
  public FlatMessages.JoinResult PayloadAsJoinResult() { return Payload<FlatMessages.JoinResult>().Value; }
  public FlatMessages.Start PayloadAsStart() { return Payload<FlatMessages.Start>().Value; }
  public FlatMessages.PlayerList PayloadAsPlayerList() { return Payload<FlatMessages.PlayerList>().Value; }
  public FlatMessages.TimeRemaining PayloadAsTimeRemaining() { return Payload<FlatMessages.TimeRemaining>().Value; }
  public FlatMessages.Shutdown PayloadAsShutdown() { return Payload<FlatMessages.Shutdown>().Value; }
  public FlatMessages.RoomList PayloadAsRoomList() { return Payload<FlatMessages.RoomList>().Value; }
  public FlatMessages.JoinRequest PayloadAsJoinRequest() { return Payload<FlatMessages.JoinRequest>().Value; }
  public FlatMessages.ChangeRoom PayloadAsChangeRoom() { return Payload<FlatMessages.ChangeRoom>().Value; }
  public FlatMessages.LeaveRoom PayloadAsLeaveRoom() { return Payload<FlatMessages.LeaveRoom>().Value; }
  public FlatMessages.CloseRoom PayloadAsCloseRoom() { return Payload<FlatMessages.CloseRoom>().Value; }
  public FlatMessages.SetCharacter PayloadAsSetCharacter() { return Payload<FlatMessages.SetCharacter>().Value; }
  public FlatMessages.JoinedTheGame PayloadAsJoinedTheGame() { return Payload<FlatMessages.JoinedTheGame>().Value; }
  public FlatMessages.ReplayFrom PayloadAsReplayFrom() { return Payload<FlatMessages.ReplayFrom>().Value; }
  public FlatMessages.TimeFromStart PayloadAsTimeFromStart() { return Payload<FlatMessages.TimeFromStart>().Value; }
  public FlatMessages.StatsReceive PayloadAsStatsReceive() { return Payload<FlatMessages.StatsReceive>().Value; }
  public FlatMessages.GameOver PayloadAsGameOver() { return Payload<FlatMessages.GameOver>().Value; }
  public FlatMessages.TeamGameOver PayloadAsTeamGameOver() { return Payload<FlatMessages.TeamGameOver>().Value; }
  public FlatMessages.SaveHash PayloadAsSaveHash() { return Payload<FlatMessages.SaveHash>().Value; }
  public FlatMessages.InvalidHash PayloadAsInvalidHash() { return Payload<FlatMessages.InvalidHash>().Value; }

  public static Offset<FlatMessages.SystemMessage> CreateSystemMessage(FlatBufferBuilder builder,
      uint timestamp = 0,
      FlatMessages.Payload payload_type = FlatMessages.Payload.NONE,
      int payloadOffset = 0) {
    builder.StartTable(3);
    SystemMessage.AddPayload(builder, payloadOffset);
    SystemMessage.AddTimestamp(builder, timestamp);
    SystemMessage.AddPayloadType(builder, payload_type);
    return SystemMessage.EndSystemMessage(builder);
  }

  public static void StartSystemMessage(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddTimestamp(FlatBufferBuilder builder, uint timestamp) { builder.AddUint(0, timestamp, 0); }
  public static void AddPayloadType(FlatBufferBuilder builder, FlatMessages.Payload payloadType) { builder.AddByte(1, (byte)payloadType, 0); }
  public static void AddPayload(FlatBufferBuilder builder, int payloadOffset) { builder.AddOffset(2, payloadOffset, 0); }
  public static Offset<FlatMessages.SystemMessage> EndSystemMessage(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatMessages.SystemMessage>(o);
  }
};


}
